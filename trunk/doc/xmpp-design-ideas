Using Jabber/XMPP for networking/communications infrastructure.

We will likely use
    ejabberd for the Jabber server.
    xmpppy for the XMPP client code.
    xmpppy for the poker Jabber component code.

We create a custom accept (TCP) external component 
    Such components have a JID like other Jabber entities.
    The component uses a TCP socket to communicate with the server.

JID structure

    jabber server on x.com; component id is poker.x.com

    gameid@poker.x.com
        where gameid is some unique ID

    gameid@poker.x.com/playerid
        where playerid is SHA-1 of the player's JID

    gameid@poker.x.com/referee
        Players send game actions to the referee in an <iq>.
        If valid, the refree posts a message in a MUC for the game.
        If invalid, player gets iq error.
        Thus, for valid actions: PLAYER -> REFEREE -> MUC -> OTHER PLAYERS

MUC messages

    <thread> for gameid?

Q: I suppose we will have a predefined number of games/tables active at
   any given time.  When one game ends another is spawned in its place.
   This way it's not up to users to create tables.  I suppose it'd be
   useful to define tourneys though.

Q: do users need to register with the site first?
   or can they use iq register to register before playing?

Q: how does one create a component in xmpppy?  what are xmpppy's custom 
   commands all about?

Q: can we use disco (service discovery) to determine available 
   games one can play?

Q: what about using pubsub instead?
    I don't think XMPPPY support this.
    How would you structure the messages?
    use pubsub to list avail games
